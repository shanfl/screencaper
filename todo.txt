1.截图保存
	BOOL CWinInfoWnd: creenshot(HWND hwnd,const std: tring &saveFileFullName)

{
	//std: tring
	//hwnd=::FindWindow(NULL,"WinInfo");
	 
	if( !::IsWindow(hwnd) ) return false;
	if( saveFileFullName.empty() ) return false;

	
	//获得窗口大小
	CRect rect;
	::GetWindowRect(hwnd, &rect);

	CRgn rgn;
	rgn.CreateRectRgn(0, 0, 0, 0);
	::GetWindowRgn(hwnd, rgn);

	//截屏这个窗口到一DDB位图中
	HBITMAP bmp;
	{
		LPRECT lpRect = &rect;
		HRGN hRgnClip = rgn;

		HDC       hScrDC, hMemDC;      
		HBITMAP    hBitmap, hOldBitmap;   
		int       nX, nY, nX2, nY2;      
		int       nWidth, nHeight;

		// 确保选定区域不为空矩形
		if (IsRectEmpty(lpRect)) return false;
		//为屏幕创建设备描述表
		hScrDC = CreateDC("DISPLAY", NULL, NULL, NULL);
		//hScrDC = GetDC(m_hWnd);
		hMemDC = CreateCompatibleDC(hScrDC);
		// 获得选定区域坐标
		nX = lpRect->left;
		nY = lpRect->top;
		nX2 = lpRect->right;
		nY2 = lpRect->bottom;

		nWidth = nX2 - nX;
		nHeight = nY2 - nY;
		hBitmap = CreateCompatibleBitmap(hScrDC, nWidth, nHeight);
		hOldBitmap = (HBITMAP)SelectObject(hMemDC, hBitmap);

		CRect rc = lpRect;
	//	rc.OffsetRect(-lpRect->left, -lpRect->top);
	//	::FillRect(hMemDC, &rc, CBrush(RGB(255, 255, 255)));
	//	: electClipRgn(hMemDC, hRgnClip);

		BitBlt(hMemDC, 0, 0, nWidth, nHeight,hScrDC, nX, nY, SRCCOPY|CAPTUREBLT);
		: electClipRgn(hMemDC, NULL);

		(HBITMAP)SelectObject(hMemDC, hOldBitmap);
		DeleteDC(hScrDC);
		DeleteDC(hMemDC);

		bmp = hBitmap;
	}

	//存盘
	CImage Image ; 
	Image.Attach(bmp);                         
	Image.Save(saveFileFullName.c_str());

	Image.Detach();
	DeleteObject(bmp);
	return true;
}
	/*
	void CaptureImg()
	{
		HDC hdcScreen;
		HDC hdcWindow;
		HDC hdcMemDC = NULL;
		HBITMAP hbmScreen = NULL;
		BITMAP bmpScreen;

		// Retrieve the handle to a display device context for the client 
		// area of the window. 
		hdcScreen = ::GetDC(NULL);
		//hdcScreen = ::CreateDC("DISPLAY", NULL, NULL, NULL);
		hdcWindow = ::GetDC(m_hWnd);

		// Create a compatible DC which is used in a BitBlt from the window DC
		hdcMemDC = CreateCompatibleDC(hdcWindow); 

		if(!hdcMemDC)
		{
			::MessageBox(m_hWnd, "CreateCompatibleDC has failed","Failed", MB_OK);
			goto done;
		}

		// Get the client area for size calculation
		RECT rcClient;
		::GetClientRect(m_hWnd, &rcClient);

		//This is the best stretch mode
		::SetStretchBltMode(hdcWindow,HALFTONE);

		//The source DC is the entire screen and the destination DC is the current window (HWND)
		if(!StretchBlt(hdcWindow, 
			0,0, 
			rcClient.right, rcClient.bottom, 
			hdcScreen, 
			0,0,
			GetSystemMetrics (SM_CXSCREEN),
			GetSystemMetrics (SM_CYSCREEN),
			SRCCOPY))
		{
			::MessageBox(m_hWnd, "StretchBlt has failed","Failed", MB_OK);
			goto done;
		}

		// Create a compatible bitmap from the Window DC
		hbmScreen = CreateCompatibleBitmap(hdcWindow, rcClient.right-rcClient.left, rcClient.bottom-rcClient.top);

		if(!hbmScreen)
		{
			::MessageBox(m_hWnd, "CreateCompatibleBitmap Failed","Failed", MB_OK);
			goto done;
		}

		// Select the compatible bitmap into the compatible memory DC.
		SelectObject(hdcMemDC,hbmScreen);

		// Bit block transfer into our compatible memory DC.
		if(!BitBlt(hdcMemDC, 
			0,0, 
			rcClient.right-rcClient.left, rcClient.bottom-rcClient.top, 
			hdcWindow, 
			0,0,
			SRCCOPY))
		{
			::MessageBox(m_hWnd, "BitBlt has failed", "Failed", MB_OK);
			goto done;
		}

		// Get the BITMAP from the HBITMAP
		GetObject(hbmScreen,sizeof(BITMAP),&bmpScreen);

		BITMAPFILEHEADER   bmfHeader;    
		BITMAPINFOHEADER   bi;

		bi.biSize = sizeof(BITMAPINFOHEADER);    
		bi.biWidth = bmpScreen.bmWidth;    
		bi.biHeight = bmpScreen.bmHeight;  
		bi.biPlanes = 1;    
		bi.biBitCount = 32;    
		bi.biCompression = BI_RGB;    
		bi.biSizeImage = 0;  
		bi.biXPelsPerMeter = 0;    
		bi.biYPelsPerMeter = 0;    
		bi.biClrUsed = 0;    
		bi.biClrImportant = 0;

		DWORD dwBmpSize = ((bmpScreen.bmWidth * bi.biBitCount + 31) / 32) * 4 * bmpScreen.bmHeight;

		// Starting with 32-bit Windows, GlobalAlloc and LocalAlloc are implemented as wrapper functions that 
		// call HeapAlloc using a handle to the process's default heap. Therefore, GlobalAlloc and LocalAlloc 
		// have greater overhead than HeapAlloc.
		HANDLE hDIB = GlobalAlloc(GHND,dwBmpSize); 
		char *lpbitmap = (char *)GlobalLock(hDIB);    

		// Gets the "bits" from the bitmap and copies them into a buffer 
		// which is pointed to by lpbitmap.
		GetDIBits(hdcWindow, hbmScreen, 0,
			(UINT)bmpScreen.bmHeight,
			lpbitmap,
			(BITMAPINFO *)&bi, DIB_RGB_COLORS);

		// A file is created, this is where we will save the screen capture.
		HANDLE hFile = CreateFileW(L"d:\\captureqwsx.bmp",
			GENERIC_WRITE,
			0,
			NULL,
			CREATE_ALWAYS,
			FILE_ATTRIBUTE_NORMAL, NULL);   

		// Add the size of the headers to the size of the bitmap to get the total file size
		DWORD dwSizeofDIB = dwBmpSize + sizeof(BITMAPFILEHEADER) + sizeof(BITMAPINFOHEADER);

		//Offset to where the actual bitmap bits start.
		bmfHeader.bfOffBits = (DWORD)sizeof(BITMAPFILEHEADER) + (DWORD)sizeof(BITMAPINFOHEADER); 

		//Size of the file
		bmfHeader.bfSize = dwSizeofDIB; 

		//bfType must always be BM for Bitmaps
		bmfHeader.bfType = 0x4D42; //BM   

		DWORD dwBytesWritten = 0;
		WriteFile(hFile, (LPSTR)&bmfHeader, sizeof(BITMAPFILEHEADER), &dwBytesWritten, NULL);
		WriteFile(hFile, (LPSTR)&bi, sizeof(BITMAPINFOHEADER), &dwBytesWritten, NULL);
		WriteFile(hFile, (LPSTR)lpbitmap, dwBmpSize, &dwBytesWritten, NULL);

		//Unlock and Free the DIB from the heap
		GlobalUnlock(hDIB);    
		GlobalFree(hDIB);

		//Close the handle for the file that was created
		CloseHandle(hFile);

		//Clean up
done:
		::DeleteObject(hbmScreen);
		::DeleteObject(hdcMemDC);
		::ReleaseDC(NULL,hdcScreen);
		::ReleaseDC(m_hWnd,hdcWindow);
	}

*/

2. 截图中间结果可调整
3. 显示保存地址文本框，让用户选择保存地址。
4. ui